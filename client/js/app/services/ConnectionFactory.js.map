{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","connection","close","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;;yCAMFC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEqB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBT,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAO,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAACC,UAAJ,EAAgB;AACZA,iDAAaJ,EAAEC,MAAF,CAASC,MAAtB;AACAG,4CAAQD,WAAWC,KAAX,CAAiBC,IAAjB,CAAsBF,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIf,KAAJ,CAAU,6CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQY,UAAR;AACH,6BAVD;;AAYAV,wCAAYa,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYT,EAAEC,MAAF,CAASS,KAArB;;AAEAjB,uCAAOO,EAAEC,MAAF,CAASS,KAAT,CAAeC,IAAtB;AACH,6BAJD;AAKH,yBAzBM,CAAP;AA0BH;;;kDAEoBP,U,EAAW;AAC5BlB,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAGR,WAAWS,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAA+C;AAC3CX,2CAAWY,iBAAX,CAA6BD,KAA7B;AACH;AACDX,uCAAWa,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,yBALD;AAMH;;;sDAEuB;AACpB,4BAAGd,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["    \nconst stores = ['negociacoes'];\nconst version = 1;\nconst dbName = 'aluraframe';\n\nvar connection;\n\nvar close;\n\nexport class ConnectionFactory {\n\n    constructor() {\n        throw new Error('Não é possível criar instâncias de ConnectionFactory');\n    }\n\n    static getConnection(){\n        return new Promise((resolve, reject) => {\n\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createStores(e.target.result);\n            }\n\n            openRequest.onsuccess = e => {\n\n                if(!connection) {\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function(){\n                        throw new Error('A conexão não pode ser fechada diretamente.');\n                    }\n                }\n                resolve(connection);\n            }\n\n            openRequest.onerror = e => {\n                console.log(e.target.error);\n\n                reject(e.target.error.name);\n            }\n        });\n    }\n\n    static _createStores(connection){\n        stores.forEach(store => {\n            if(connection.objectStoreNames.contains(store)){\n                connection.deleteObjectStore(store)\n            }\n            connection.createObjectStore(store, {autoIncrement: true});\n        });\n    }\n\n    static closeConnection(){\n        if(connection){\n            close();\n            connection = null;\n        }\n    }\n}\n"]}